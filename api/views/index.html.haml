%section#main
  %h1 Getting started
  %p We're really stoked that you want to integrate Poll Everywhere into your application. We built this API with goal of providing developers with a simple, reliable, and enjoyable way to integrate Poll Everywhere into applications.

  %h2 We â™¥ JSON
  %p JSON key-value data structures are used throughout the API application to persist and modify data to the web application. Typically resources will include a root key that corresponds with the name of the name of the resource; from example, multiple choice polls all have the root key 'multiple_choice_poll'.

  %h2 Authentication
  %p A Poll Everywhere username and password is used to login to the API and manipulate polls on an account. These credentials can be created at <a href="http://www.polleverywhere.com/reserve">Poll Everywhere</a>.
  
  %p The credentials can be configured on the Poll Everywhere gem or manually via HTTP Basic authentication (More information on HTTP Basic credentials an encoding can be found at <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">Wikipedia</a>).
  
  %pre.ruby
    :preserve
      PollEverywhere.config do
        username  "my_pollev_username"
        password  "my_pollev_password"
      end

  %h2 Support
  %p We regularly run a <a href="https://github.com/polleverywhere/polleverywhere/tree/master/spec/integration">suite of integration tests</a> against our API to make sure that our API is running smoothly.

  %p Now lets roll up our sleeves and get our hands dirty!

  %h1 Polls
  %h2 Multiple choice polls
  %p These polls are great for collecting structured information from audiences if you want to define a set of answers that participants may choose from.

  %h3 Attributes
  %dl.attributes
    %dt
      %code=PollEverywhere::MultipleChoicePoll.root_key
    %dd Root key for multiple choice poll data.
    %dd
      %dl
        -PollEverywhere::MultipleChoicePoll.prop_set.each do |_, prop|
          %dt
            %code=prop.name
          %dd=prop.description
          -if prop.name == :options
            %dd
              %dl
                -PollEverywhere::MultipleChoicePoll::Option.prop_set.each do |_, prop|
                  %dt
                    %code=prop.name
                  %dd=prop.description
  
  %h3 Creating a multiple choice poll
  %p Specify a title and a few options to create a multiple choice poll.
  :example
    @mcp = PollEverywhere::MultipleChoicePoll.from_hash(:title => 'Hey dude!', :options => %w[red blue green]).save
  
  %h3 Changing the title of a multiple choice poll
  :example
    @mcp.title = "I like different titles"
    @mcp.save

  %h3 Starting and stopping multiple choice polls
  %p To prevent audience members from responding to a poll, change the poll state to "closed".
  :example
    @mcp.stop
  
  %p To open it back up and allow responses to come on through change the state to "opened".
  :example
    @mcp.start

  %h3 Clear the poll results
  %p To clear out any current results on a poll, you call the clear method
  :example
    @mcp.clear

  %h3 Delete a multiple choice poll
  %p When you're totally finished with the poll and you want to tidy things up a bit, you can delete polls
  :example
    @mcp.destroy
  
  %h2 Free text polls
  %p These polls are used to collect short answers or unstructured responses from participants.
  %h3 Attributes
  %dl.attributes
    %dt
      %code=PollEverywhere::FTP.root_key
    %dd Root key for free text poll data.
    %dd
      %dl
        -PollEverywhere::FTP.prop_set.each do |_, prop|
          %dt
            %code=prop.name
          %dd=prop.description

  %h3 Create free text polls
  %p Creating a free text poll is similar to building a multiple choice poll, just without the options attribute.
  :example
    @ftp = PollEverywhere::FreeTextPoll.from_hash(:title => "What is the meaning of life?").save

  %h3 Modify a free text poll
  %p Change the title attribute to change the poll
  :example
    @ftp.title = "No really, what is the meaning of life?"
    @ftp.save

  %h3 Clear the poll results
  %p To clear out any current results on a poll, you call the clear method
  :example
    @ftp.clear

  %h3 Delete a free text poll
  :example
    @ftp.destroy
  
  %h1 Participants
  %p Participants are used to identify who is responding to your polls.    

  %h2 Attributes
  %dl.attributes
    %dt
      %code=PollEverywhere::Participant.root_key
    %dd Root key for participant data.
    %dd
      %dl
        -PollEverywhere::Participant.prop_set.each do |_, prop|
          %dt
            %code=prop.name
          %dd=prop.description
  
  %h2 Creating a new Participant
  %p Specify the details of a new participant
  :example
    @participant = PollEverywhere::Participant.from_hash(:email => 'b.obama@whitehouse.gov', :first_name => 'Barack', :last_name => 'Obama', :password => 'mickeymouse', :responding_as => 'Barack').save

  %h2 Updating participant details
  :example
    @participant.responding_as = "Mr. President"
    @participant.save

  %h2 Changing an email address
  %p.http Changing an email address is a slightly special case at an HTTP level because the new email address should be in the body of the participant data and should be <code>PUT</code> to the original email address.
  :example
    @participant.email = "mr.president@hotmail.com"
    @participant.save
  
  %h2 Delete a Participant
  :example
    @participant.destroy
